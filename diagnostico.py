import streamlit as st
import pandas as pd
import datetime

# --- Dados iniciais do sistema ---
placa_modelo = "UCPIP V1.2"
sintomas = {
    "Placa n√£o liga": [
        ("U12", "Regulador principal 3.3V", "Verificar tens√£o de sa√≠da: 3.3V"),
        ("U1", "Regulador auxiliar", "Verificar curto entre entrada e GND"),
        ("U27", "Regulador auxiliar", "Verificar tens√£o de sa√≠da"),
        ("C4", "Capacitor eletrol√≠tico de entrada", "Verificar se est√° estufado ou em curto"),
        ("C5", "Capacitor eletrol√≠tico de entrada", "Verificar continuidade com GND"),
        ("D2", "Diodo de prote√ß√£o de entrada", "Verificar se est√° em curto")
    ],
    "Superaquecimento ou alto consumo": [
        ("U21", "Microprocessador principal", "Verificar consumo de corrente (>150mA pode indicar curto)"),
        ("U12", "Regulador de tens√£o", "Verificar dissipa√ß√£o excessiva"),
        ("C6", "Filtro de ru√≠do", "Verificar resist√™ncia entre os terminais"),
        ("C7", "Filtro de ru√≠do", "Verificar continuidade com GND"),
        ("U28", "Mem√≥ria Flash SPI", "Verificar se esquenta em excesso")
    ],
    "Sem comunica√ß√£o RS-485": [
        ("U11", "CI RS-485 SN65HVD3082EDR", "Verificar alimenta√ß√£o e sinal em A/B"),
        ("R39", "Resistor de linha", "Verificar valor de resist√™ncia"),
        ("R40", "Resistor de linha", "Verificar continuidade"),
        ("CNx", "Conector de comunica√ß√£o", "Inspecionar pinos e solda fria")
    ],
    "LED n√£o acende / Sem sinal visual": [
        ("LED1~LEDn", "LEDs de sinaliza√ß√£o", "Verificar com mult√≠metro no modo diodo"),
        ("R38", "Resistor limitador de corrente", "Verificar valor nominal"),
        ("R115", "Resistor limitador", "Verificar continuidade"),
        ("U10", "Flip-Flop de controle de LEDs", "Verificar alimenta√ß√£o e sa√≠da l√≥gica")
    ],
    "Rel√© n√£o aciona / Sem sa√≠da": [
        ("RL1~RL8", "Rel√©s de sa√≠da", "Verificar tens√£o na bobina"),
        ("Q24", "Transistor de acionamento", "Testar com base polarizada"),
        ("U15", "Buffer l√≥gico de controle", "Verificar n√≠vel de sa√≠da"),
        ("U16", "Flip-Flop de controle", "Testar n√≠vel l√≥gico de acionamento"),
        ("D2", "Diodo de prote√ß√£o do rel√©", "Verificar curto reverso")
    ]
}

# --- Interface Web com Streamlit ---
st.set_page_config(page_title="Diagn√≥stico de Placas", layout="centered")
st.title("üîç Diagn√≥stico de Placa Eletr√¥nica")
st.subheader(f"Modelo da placa: {placa_modelo}")

st.markdown("---")
st.markdown("**Informe o n√∫mero de s√©rie da placa:**")
num_serie = st.text_input("N√∫mero de S√©rie")

st.markdown("**Selecione o(s) sintoma(s) apresentado(s):**")
sintomas_selecionados = st.multiselect("", options=list(sintomas.keys()))

if sintomas_selecionados:
    st.markdown("---")
    st.markdown("### üß© Componentes a verificar:")

    for sintoma in sintomas_selecionados:
        st.markdown(f"#### üîß {sintoma}")
        tabela = pd.DataFrame(sintomas[sintoma], columns=["Componente", "Fun√ß√£o", "Teste recomendado"])
        st.dataframe(tabela, use_container_width=True)

    st.markdown("---")
    observacoes = st.text_area("üìù Observa√ß√µes do operador:", placeholder="Descreva testes realizados, medi√ß√µes ou anomalias...")

    if st.button("Salvar diagn√≥stico"):
        data = {
            "Data": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "N√∫mero de S√©rie": num_serie,
            "Sintomas": ", ".join(sintomas_selecionados),
            "Observa√ß√µes": observacoes
        }
        historico = pd.DataFrame([data])
        historico.to_csv("historico_diagnostico.csv", mode="a", header=not pd.io.common.file_exists("historico_diagnostico.csv"), index=False)
        st.success("Diagn√≥stico salvo com sucesso!")
else:
    st.info("Selecione pelo menos um sintoma para iniciar o diagn√≥stico.")
